rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserRole(role) {
      // This get() call requires that the user has permission to read their own user document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(resourceId) {
      return request.auth.uid == get(/databases/$(database)/documents/resources/$(resourceId)).data.uploaderId;
    }

    // Rules for user profiles
    match /users/{userId} {
      // Allow users to get their own document, required for isUserRole() to work.
      allow get: if isUserAuthenticated() && request.auth.uid == userId;
      // Allow any authenticated user to read other user profiles (e.g., for names)
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && request.auth.uid == userId;
    }

    // Rules for resources
    match /resources/{resourceId} {
      allow get: if resource.data.status == 'approved'; // Public read for approved resources
      allow list: if true; // Public can list all resources (client-side filters for approved)
      allow create: if isUserAuthenticated() && (isUserRole('Student') || isUserRole('Admin'))
                    && request.resource.data.uploaderId == request.auth.uid;
      allow update: if isUserAuthenticated() && (isOwner(resourceId) || isUserRole('Admin'));
      allow delete: if isUserAuthenticated() && (isOwner(resourceId) || isUserRole('Admin'));
    }
    
    // Rules for dynamic filter data
    match /metadata/{docId} {
       allow read: if true;
       allow create, update: if isUserAuthenticated();
    }
  }
}
